name: CI

on:
  push:
    branches: ["main"]
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        working-directory: api
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            api/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('api/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        working-directory: api
        run: poetry install --no-interaction --no-root

      - name: Ruff
        working-directory: api
        run: poetry run ruff check .

      - name: Black
        working-directory: api
        run: poetry run black --check .

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API image
        run: docker build -f api/Dockerfile -t ai-companion-api:ci .

      - name: Build Worker image
        run: docker build -f api/Dockerfile.worker -t ai-companion-worker:ci .

  test:
    runs-on: ubuntu-latest
    needs: [lint, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run integration tests
        env:
          OPENAI_API_KEY: test
        run: make test
